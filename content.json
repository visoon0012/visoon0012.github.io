{"meta":{"title":"Visoon's Blog","subtitle":"会扯淡的程序猿","description":"多动脑，少动手","author":"Visoon","url":"http://visoon0012.github.io"},"pages":[{"title":"categories","date":"2017-10-19T02:55:07.000Z","updated":"2017-10-19T03:02:16.650Z","comments":false,"path":"categories/index.html","permalink":"http://visoon0012.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-10-19T02:52:28.000Z","updated":"2017-10-19T03:02:08.485Z","comments":false,"path":"tags/index.html","permalink":"http://visoon0012.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Windows下快速删除Nodejs项目","slug":"Nodejs/Windows下快速删除Nodejs项目","date":"2017-12-06T08:16:59.000Z","updated":"2017-12-06T08:27:09.573Z","comments":true,"path":"2017/Nodejs/Windows下快速删除Nodejs项目/","link":"","permalink":"http://visoon0012.github.io/2017/Nodejs/Windows下快速删除Nodejs项目/","excerpt":"","text":"项目说明 删除一个Node项目在Windows下面是一件非常操蛋的事情 删除工具npm install rimraf -g rimraf node_modules 直接Powershell删除如删除 D:\\temp\\目录下的所有文件的写法如下： rmdir d:\\temp\\","categories":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://visoon0012.github.io/categories/Nodejs/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://visoon0012.github.io/tags/NodeJS/"}]},{"title":"Ubuntu使用KCPRAW伪装UDP请求,防止运营商拦截","slug":"Shadowsocks/Ubuntu使用KCPRAW伪装UDP请求防止运营商拦截","date":"2017-11-20T16:00:00.000Z","updated":"2017-11-21T08:15:39.684Z","comments":true,"path":"2017/Shadowsocks/Ubuntu使用KCPRAW伪装UDP请求防止运营商拦截/","link":"","permalink":"http://visoon0012.github.io/2017/Shadowsocks/Ubuntu使用KCPRAW伪装UDP请求防止运营商拦截/","excerpt":"","text":"- 原因及原理因为KCP多倍发包原理，有些地方运营商会拦截多倍的UDP请求，使用KCPRAW可以把UDP伪装成TCP流量，防止运营商拦截 快速设定客户端、服务器分别下载对应平台的预编译版本，并解压，通过下面的命令启动端口转发。12KCP客户端: ./client_darwin_amd64 -r &quot;KCP服务器IP地址:4000&quot; -l &quot;:8388&quot; -mode fast2KCP服务器: ./server_linux_amd64 -t &quot;目标服务器IP地址:8388&quot; -l &quot;:4000&quot; -mode fast2 以上命令可以实现8388/tcp端口的转发（通过4000/udp端口），即： Application -&gt; KCP客户端(8388/tcp) -&gt; KCP服务器(4000/udp) -&gt; Server(8388/tcp) 从源码安装12$go get -u github.com/xtaci/kcptun/client$go get -u github.com/xtaci/kcptun/server 注意: 如果出现错误提示，请确保依赖库能正确访问到。 Release中的所有二进制版本，是通过 build-release.sh 脚本生成并优化。 速度对比 测速网站: https://fast.com 接入速度: 100Mbps WIFI: 5GHz TL-WDR3320 使用方法在Mac OS X El Capitan下的帮助输出，注意默认值: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667$ ./client_darwin_amd64 -hNAME: kcptun - client(with SMUX)USAGE: client_darwin_amd64 [global options] command [command options] [arguments...]VERSION: 20170120COMMANDS: help, h Shows a list of commands or help for one commandGLOBAL OPTIONS: --localaddr value, -l value local listen address (default: &quot;:12948&quot;) --remoteaddr value, -r value kcp server address (default: &quot;vps:29900&quot;) --key value pre-shared secret between client and server (default: &quot;it&apos;s a secrect&quot;) [$KCPTUN_KEY] --crypt value aes, aes-128, aes-192, salsa20, blowfish, twofish, cast5, 3des, tea, xtea, xor, none (default: &quot;aes&quot;) --mode value profiles: fast3, fast2, fast, normal (default: &quot;fast&quot;) --conn value set num of UDP connections to server (default: 1) --autoexpire value set auto expiration time(in seconds) for a single UDP connection, 0 to disable (default: 0) --mtu value set maximum transmission unit for UDP packets (default: 1350) --sndwnd value set send window size(num of packets) (default: 128) --rcvwnd value set receive window size(num of packets) (default: 512) --datashard value, --ds value set reed-solomon erasure coding - datashard (default: 10) --parityshard value, --ps value set reed-solomon erasure coding - parityshard (default: 3) --dscp value set DSCP(6bit) (default: 0) --nocomp disable compression --snmplog value collect snmp to file, aware of timeformat in golang, like: ./snmp-20060102.log --snmpperiod value snmp collect period, in seconds (default: 60) --log value specify a log file to output, default goes to stderr -c value config from json file, which will override the command from shell --help, -h show help --version, -v print the version$ ./server_darwin_amd64 -hNAME: kcptun - server(with SMUX)USAGE: server_darwin_amd64 [global options] command [command options] [arguments...]VERSION: 20170120COMMANDS: help, h Shows a list of commands or help for one commandGLOBAL OPTIONS: --listen value, -l value kcp server listen address (default: &quot;:29900&quot;) --target value, -t value target server address (default: &quot;127.0.0.1:12948&quot;) --key value pre-shared secret between client and server (default: &quot;it&apos;s a secrect&quot;) [$KCPTUN_KEY] --crypt value aes, aes-128, aes-192, salsa20, blowfish, twofish, cast5, 3des, tea, xtea, xor, none (default: &quot;aes&quot;) --mode value profiles: fast3, fast2, fast, normal (default: &quot;fast&quot;) --mtu value set maximum transmission unit for UDP packets (default: 1350) --sndwnd value set send window size(num of packets) (default: 1024) --rcvwnd value set receive window size(num of packets) (default: 1024) --datashard value, --ds value set reed-solomon erasure coding - datashard (default: 10) --parityshard value, --ps value set reed-solomon erasure coding - parityshard (default: 3) --dscp value set DSCP(6bit) (default: 0) --nocomp disable compression --snmplog value collect snmp to file, aware of timeformat in golang, like: ./snmp-20060102.log --snmpperiod value snmp collect period, in seconds (default: 60) --log value specify a log file to output, default goes to stderr -c value config from json file, which will override the command from shell --help, -h show help --version, -v print the version 分层参数图 两端参数必须一致的有: datashard –前向纠错 parityshard –前向纠错 nocomp –压缩 key –密钥 crypt –加密算法 其余为两边可独立设定的参数 内置模式响应速度:fast3 &gt; fast2 &gt; [fast] &gt; normal &gt; default有效载荷比:default &gt; normal &gt; [fast] &gt; fast2 &gt; fast3中间-mode参数比较均衡，总之就是越快，包重传越激进。更高级的 手动档 需要理解KCP协议，并通过 隐藏参数 调整，例如:1-mode manual -nodelay 1 -resend 2 -nc 1 -interval 20 搭配1. fast + FEC(5,5) 搭配2. fast2 + FEC(10,3) 搭配3. fast2 + FEC(0,0) 默认profile参考: https://github.com/xtaci/kcptun/blob/master/client/main.go#L248 前向纠错前向纠错采用Reed Solomon纠删码, 它的基本原理如下： 给定n个数据块d1, d2,…, dn，n和一个正整数m， RS根据n个数据块生成m个校验块， c1, c2,…, cm。 对于任意的n和m， 从n个原始数据块和m 个校验块中任取n块就能解码出原始数据， 即RS最多容忍m个数据块或者校验块同时丢失。 通过参数n -parityshard m``` 在两端同时设定。12345678910111213141516171819202122数据包发送顺序严格遵循: n个datashard紧接m个parityshard，重复。注意：为了发挥FEC最佳效果，设置 parityshard/(parity+datashard) &gt; packet loss，比如5/(5+5) &gt; 30%### 窗口调整**简易窗口自我调优方法**：&gt; 第一步：同时在两端逐步增大client rcvwnd和server sndwnd; &gt; 第二步：尝试下载，观察如果带宽利用率（服务器＋客户端两端都要观察）到达预期则停止，否则跳转到第一步。**注意：产生大量重传时，一定是窗口偏大了**### 安全无论你上层如何加密，如果```-crypt none```，那么**协议头部**都是**明文**的，建议至少采用```-crypt aes-128```加密，并修改密码。密码可以通过`-key`指定，也可以通过环境变量`KCPTUN_KEY`指定。注意: ```-crypt xor``` 也是不安全的，除非你知道你在做什么。 附加密速度Benchmark： BenchmarkAES128-4 200000 11182 ns/opBenchmarkAES192-4 200000 12699 ns/opBenchmarkAES256-4 100000 13757 ns/opBenchmarkTEA-4 50000 26441 ns/opBenchmarkSimpleXOR-4 3000000 441 ns/opBenchmarkBlowfish-4 30000 48036 ns/opBenchmarkNone-4 20000000 106 ns/opBenchmarkCast5-4 20000 60222 ns/opBenchmarkTripleDES-4 2000 878759 ns/opBenchmarkTwofish-4 20000 68501 ns/opBenchmarkXTEA-4 20000 77417 ns/opBenchmarkSalsa20-4 300000 4998 ns/op12345678910111213141516171819202122232425262728293031323334353637383940### 内存控制路由器，手机等嵌入式设备通常对**内存用量敏感**，通过调节环境变量GOGC（例如GOGC=20)后启动client，可以降低内存使用。 参考：https://blog.golang.org/go15gc### DSCPDSCP差分服务代码点（Differentiated Services Code Point），IETF于1998年12月发布了Diff-Serv（Differentiated Service）的QoS分类标准。它在每个数据包IP头部的服务类别TOS标识字节中，利用已使用的**6比特**和未使用的2比特，通过编码值来区分优先级。 常用DSCP值可以参考[Wikipedia DSCP](https://en.wikipedia.org/wiki/Differentiated_services#Commonly_used_DSCP_values)，至于有没有用，完全取决于数据包经过的设备。 通过 ```-dscp ``` 参数指定dscp值，两端可分别设定。注意：设置dscp不一定会更好，需要尝试。### Snappy数据流压缩&gt; Snappy is a compression/decompression library. It does not aim for maximum&gt; compression, or compatibility with any other compression library; instead,&gt; it aims for very high speeds and reasonable compression. For instance,&gt; compared to the fastest mode of zlib, Snappy is an order of magnitude faster&gt; for most inputs, but the resulting compressed files are anywhere from 20% to&gt; 100% bigger.&gt; Reference: http://google.github.io/snappy/压缩对于非加密，非压缩的数据能降低传输数据量，比如点对点的HTTP数据转发。通过参数 ```-nocomp``` 在两端同时设定以关闭压缩。&gt; 提示: 关闭压缩可能会降低延迟。### 流量控制**必要性: 针对流量敏感的服务器，做双保险。** &gt; 基本原则: SERVER的发送速率不能超过ADSL下行带宽，否则只会浪费您的服务器带宽。 在server通过linux tc，可以限制服务器发送带宽。 举例: 用linux tc限制server发送带宽为32mbit/s: root@kcptun:~# cat tc.shtc qdisc del dev eth0 roottc qdisc add dev eth0 root handle 1: htbtc class add dev eth0 parent 1: classid 1:1 htb rate 32mbittc filter add dev eth0 protocol ip parent 1:0 prio 1 handle 10 fw flowid 1:1iptables -t mangle -A POSTROUTING -o eth0 -j MARK –set-mark 10root@kcptun:~#123456789101112131415161718192021222324252627282930其中eth0为网卡，有些服务器为ens3，有些为p2p1，通过ifconfig查询修改。### SNMP```go// Snmp defines network statistics indicatortype Snmp struct &#123; BytesSent uint64 // raw bytes sent BytesReceived uint64 MaxConn uint64 ActiveOpens uint64 PassiveOpens uint64 CurrEstab uint64 // count of connections for now InErrs uint64 // udp read errors InCsumErrors uint64 // checksum errors from CRC32 KCPInErrors uint64 // packet iput errors from kcp InSegs uint64 OutSegs uint64 InBytes uint64 // udp bytes received OutBytes uint64 // udp bytes sent RetransSegs uint64 FastRetransSegs uint64 EarlyRetransSegs uint64 LostSegs uint64 // number of segs infered as lost RepeatSegs uint64 // number of segs duplicated FECRecovered uint64 // correct packets recovered from FEC FECErrs uint64 // incorrect packets recovered from FEC FECSegs uint64 // FEC segments received FECShortShards uint64 // number of data shards that&apos;s not enough for recovery&#125; 使用-SIGUSR1 pid``` 可以在控制台打印出SNMP信息，通常用于精细调整**当前链路的有效载荷比**。 123观察```RetransSegs,FastRetransSegs,LostSegs,OutSegs```这几者的数值比例，用于参考调整```-mode manual,fec```的参数。 #### 带宽计算公式 在不丢包的情况下，有最大-rcvwnd 个数据包在网络上正在向你传输，以平均数据包大小avgsize计算，在任意时刻，有： network_cap = rcvwnd*avgsize 数据流向你，这个值再除以ping值(rtt)，等于最大带宽使用量。 max_bandwidth = network_cap/rtt = rcvwnd*avgsize/rtt 举例，设rcvwnd = 1024, avgsize = 1KB, rtt = 400ms，则： max_bandwidth = 1024 * 1KB / 400ms = 2.5MB/s ~= 25Mbps （注：以上计算不包括前向纠错的数据量） 前向纠错是最大带宽量的一个固定比例增加： max_bandwidth_fec = max_bandwidth*(datashard+parityshard)/datashard 举例，设datashard = 10 , partiyshard = 3，则： max_bandwidth_fec = max_bandwidth * (10 + 3) /10 = 1.3*max_bandwidth ＝ 1.3 * 25Mbps = 32.5Mbps ``` 故障排除 Q: 客户端和服务器端皆无 stream opened信息。A: 连接客户端程序的端口设置错误。 Q: 客户端有 stream opened信息，服务器端没有。A: 连接服务器的端口设置错误，或者被防火墙拦截。 Q: 客户端服务器皆有 stream opened信息，但无法通信。A: 上层软件的设定错误。 免责申明用户以各种方式使用本软件（包括但不限于修改使用、直接使用、通过第三方使用）的过程中，不得以任何方式利用本软件直接或间接从事违反中国法律、以及社会公德的行为。软件的使用者需对自身行为负责，因使用软件引发的一切纠纷，由使用者承担全部法律及连带责任。作者不承担任何法律及连带责任。 对免责声明的解释、修改及更新权均属于作者本人所有。 特别鸣谢GITHUB上的各位大佬，就不打名字了 好人一生平安!","categories":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/categories/Shadowsocks/"}],"tags":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/tags/Shadowsocks/"}]},{"title":"Chrome下开启跨域功能","slug":"Other/Chrome下开启跨域功能","date":"2017-11-13T16:00:00.000Z","updated":"2017-11-14T03:59:03.225Z","comments":true,"path":"2017/Other/Chrome下开启跨域功能/","link":"","permalink":"http://visoon0012.github.io/2017/Other/Chrome下开启跨域功能/","excerpt":"","text":"Chrome下开启跨域功能默认情况下，Chrome等浏览器是不允许跨域访问的(而App开发的时候跨域方便一点，还可以用爬虫)，想要开启则需要： 在桌面Chrome图标下右键-属性-目标中填入以下信息 &quot;你的Chrome路径&quot; --disable-web-security --user-data-dir=C:\\MyChromeDevUserData C:\\MyChromeDevUserData 这个目录需要自己创建","categories":[{"name":"Other","slug":"Other","permalink":"http://visoon0012.github.io/categories/Other/"}],"tags":[{"name":"Other","slug":"Other","permalink":"http://visoon0012.github.io/tags/Other/"},{"name":"Chrome","slug":"Chrome","permalink":"http://visoon0012.github.io/tags/Chrome/"}]},{"title":"Angula2中innerHtml的问题","slug":"Angular2+/Angula2中innerHtml的问题","date":"2017-11-13T16:00:00.000Z","updated":"2017-11-14T03:50:19.092Z","comments":true,"path":"2017/Angular2+/Angula2中innerHtml的问题/","link":"","permalink":"http://visoon0012.github.io/2017/Angular2+/Angula2中innerHtml的问题/","excerpt":"","text":"innerHtml报不安全问题Angular2引入外部html时候，会报不安全提示，此时如果你信任html来源，则添加如下转换： 导入包 import {DomSanitizer} from &quot;@angular/platform-browser&quot;; constructor() 中添加 public sanitizer: DomSanitizer 转换数据 innerHtml = this.sanitizer.bypassSecurityTrustHtml(&apos;html信息&apos;);","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/"},{"name":"Angular2+","slug":"JAVASCRIPT/Angular2","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/Angular2/"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/tags/JAVASCRIPT/"},{"name":"Angular2+","slug":"Angular2","permalink":"http://visoon0012.github.io/tags/Angular2/"}]},{"title":"Ubuntu 使用 KCPTUN 为 SS 加速","slug":"Shadowsocks/Ubuntu使用KCPTUN为SS加速","date":"2017-10-18T16:00:00.000Z","updated":"2017-10-19T07:00:15.420Z","comments":true,"path":"2017/Shadowsocks/Ubuntu使用KCPTUN为SS加速/","link":"","permalink":"http://visoon0012.github.io/2017/Shadowsocks/Ubuntu使用KCPTUN为SS加速/","excerpt":"","text":"首先，你需要部署好SS。然后一行行运行下面脚本 wget --no-check-certificate https://github.com/kuoruan/shell-scripts/raw/master/kcptun/kcptun.sh chmod +x ./kcptun.sh ./kcptun.sh 1.设置 Kcptun 的服务端端口： 请输入 Kcptun Server 端口 [1-65535]: (默认: 29900): 请输入一个未被占用的端口，Kcptun 运行时将使用此端口。 2.设置加速的 IP： 请输入需要加速的地址: (默认: 127.0.0.1): 一般填入你服务器的IP。如果你想使用 IPv6，请直接填写 IPv6 地址，不需要加 []，脚本会自动添加。 3.设置需要加速的端口： 请输入需要加速的端口 [1-65535]: (默认: 12948): 填入上面获取到的加速端口。 程序会检查当前是不是有程序占用着此端口，如果你的 Shadowsocks 没在运行，或者没有软件使用此端口，会弹出如下提示： 当前没有软件使用此端口, 确定加速此端口?(y/n) 如果你确认 Shadowsocks 运行时会使用此端口，那么输入 “y” 回车即可。 4.设置 Kcptun 密码： 请输入 Kcptun 密码: (如果不想使用密码请留空): 这就是说，你可以为 Kcptun 单独设置一个密码，防止被他人恶意使用。这个密码和 SS 的密码没有半毛钱关系，请不要把它们混淆了。 再提一句，Kcptun 和 Shadowsocks 没有任何关系，请不要脑补它们之间存在任何联系，Kcptun 你可以理解为一款网络加速软件，只不过它是通过将 TCP 协议转换为 UDP 协议，然后再通过大量的发送数据包，浪费了带宽以换取网速的提升。它能加速所有以 TCP 协议传输数据的软件，不单单是 Shadowsocks。只是大家都用来……你懂的 回到上面的密码设置问题，如果你这里选择直接回车，也就是代表你不自定义密码。但是 Kcptun 有一个默认的密码，这个密码是： it&apos;s a secrect 。 5.禁用压缩 是否禁用数据压缩? (默认: 不禁用) [y/n]: Kcptun 默认是启用压缩的。如果你这里设置为 y，也就是配置为 nocomp:true，那么就是禁用压缩。 许多朋友这里设置的是保持默认（启用压缩），而偏偏在软件之中设置为禁用压缩，当然就连不上咯。 其他配置项不用我说了，如果你了解它是干什么的，可以自定义配置。如果不知道，那么直接回车使用默认参数。 但是，使用默认参数，是有可能浪费大量流量的，如果你想减少流量使用，你需要会调节参数： 先将 client rcvwnd 和 server sndwnd 调到一个较小值； 同时在两端逐步增大 client rcvwnd 和 server sndwnd ; 尝试下载，观察如果带宽利用率（服务器＋客户端两端都要观察）接近物理带宽则停止，否则跳转到第二步。 任何事物都是有两面性的，选择了速度，就只有放弃流量。 各参数详细信息请查看：https://github.com/xtaci/kcptun 如果你用国内服务器安装，可能会出现文件下载失败。这是由于脚本会到 Github 下载文件，而 Github 的某些下载地址在国内你懂的……所以文件下载失败真不是我的锅。如果安装成功，应该能看到如下输出信息： 恭喜, Kcptun 服务端配置完毕！ 正在获取当前安装的 Kcptun 版本... 服务器IP: 10.10.10.10 端口: 29900 加速地址: 127.0.0.1:8388 密码: 123456 加密方式 Crypt: salsa20 当前安装的 Kcptun 版本为: v20160922 推荐的客户端配置为: { &quot;localaddr&quot;: &quot;:8388&quot;, &quot;remoteaddr&quot;: &quot;10.10.10.10:29900&quot;, &quot;key&quot;: &quot;123456&quot;, &quot;crypt&quot;: &quot;salsa20&quot;, &quot;mode&quot;: &quot;fast&quot;, &quot;mtu&quot;: 1350, &quot;sndwnd&quot;: 1024, &quot;rcvwnd&quot;: 1024, &quot;datashard&quot;: 10, &quot;parityshard&quot;: 3, &quot;dscp&quot;: 0, &quot;conn&quot;: 1, &quot;autoexpire&quot;: 60, &quot;nocomp&quot;: false } 手机端参数可以使用： ******* 其他参数请自行计算或设置, 详细信息可以查看: https://github.com/xtaci/kcptun Kcptun 安装目录: /usr/share/kcptun Kcptun 日志文件目录: /var/log/kcptun/ 请将以上的提示信息复制保存下来，后面配置客户端会用到这些提示信息。 注意：服务端的 sndwnd 对应的是客户端的 recwnd，所以请不要问我为什么输出的客户端参数和你配置的服务端参数是反的。 安装之后，Kcptun 服务交由 Supervisor 管理。 Supervisor 相关命令： service supervisord {start|stop|restart|status} Kcptun 相关命令： supervisorctl {start|stop|restart|status} kcptun Supervisor 启动的时候会同时启动 Kcptun，运行 kcptun 相关命令时先确保 Supervisor 已启动。","categories":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/categories/Shadowsocks/"}],"tags":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/tags/Shadowsocks/"}]},{"title":"Ubuntu 搭建 Shadowsocks 进行科学上网","slug":"Shadowsocks/Ubuntu搭建Shadowsocks进行科学上网","date":"2017-10-18T16:00:00.000Z","updated":"2017-10-19T07:28:27.382Z","comments":true,"path":"2017/Shadowsocks/Ubuntu搭建Shadowsocks进行科学上网/","link":"","permalink":"http://visoon0012.github.io/2017/Shadowsocks/Ubuntu搭建Shadowsocks进行科学上网/","excerpt":"首先，你需要一台在科学国度的服务器，这里我们用ubuntu来进行搭建。 $ sudo apt-get update $ sudo apt-get install python-gevent python-pip $ sudo pip install setuptools $ sudo pip install shadowsocks $ apt-get install python-m2crypto","text":"首先，你需要一台在科学国度的服务器，这里我们用ubuntu来进行搭建。 $ sudo apt-get update $ sudo apt-get install python-gevent python-pip $ sudo pip install setuptools $ sudo pip install shadowsocks $ apt-get install python-m2crypto 创建config.json配置文件： $ vi /etc/shadowsocks.json 修改config.json： { \"server\":\"Server IP\", \"server_port\":8388, \"local_port\":1080, \"password\":\"password\", \"timeout\":600, \"method\":\"aes-256-cfb\" } &nbsp; 运行Shadowsocks： $ su - $ ssserver -c /etc/shadowsocks.json -d start $ ssserver -c /etc/shadowsocks.json -d stop 然后用你的Shadowsocks客户端输入服务器信息，科学上网完毕。 注意：1.需要python27环境，一般ubuntu都自带了。2.附赠WIN客户端链接：点我下载 下一章节 用KCPTUN为SS加速","categories":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/categories/Shadowsocks/"}],"tags":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/tags/Shadowsocks/"}]},{"title":"【IONIC2+】项目开发 - 3 - 添加页面","slug":"IONIC2+/【IONIC2+】项目开发-3-添加页面","date":"2017-06-13T08:16:59.000Z","updated":"2017-10-19T03:25:26.615Z","comments":true,"path":"2017/IONIC2+/【IONIC2+】项目开发-3-添加页面/","link":"","permalink":"http://visoon0012.github.io/2017/IONIC2+/【IONIC2+】项目开发-3-添加页面/","excerpt":"","text":"往刚才创建的项目中添加页面 前往官网，查看 IONIC官方教程 如果你看不懂英文，没事，那我们就不学了。 创建页面有几个重要的地方 创建 .ts 文件，这个文件是存放页面逻辑的地方，例如我们创建一个帖子页面在 post.ts 文件里 export class PostPage {} 创建 .html 文件，这个文件是界面 创建 .scss 文件，这个文件是CSS 把 .ts 文件中的类的引用添加到 app/app.module.ts 中 import {PostPage} from \"../pages/post\"; 把类名添加到 NgModule 中的 declarations 和 entryComponents 中(所有新加的页面都要放到这里进行声明，不然会报错) declarations: [ MyApp, TabsPage, PostPage ] entryComponents: [ MyApp, TabsPage, PostPage ] 要跳转到 PostPage 的页面，只需要在需要的地方使用(后面的参数是传递过去的值，在 PostPage 中你可以用 NavParams 接收)this.navCtrl.push(PostPage, { item: item });下一章节 创建一个ionic2+ 的项目。","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/"},{"name":"IONIC2+","slug":"JAVASCRIPT/IONIC2","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/IONIC2/"}],"tags":[{"name":"Angular2+","slug":"Angular2","permalink":"http://visoon0012.github.io/tags/Angular2/"},{"name":"IONIC2+","slug":"IONIC2","permalink":"http://visoon0012.github.io/tags/IONIC2/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://visoon0012.github.io/tags/NodeJS/"}]},{"title":"【IONIC2+】项目开发 - 2 - 创建项目","slug":"IONIC2+/【IONIC2+】项目开发-2-创建项目","date":"2017-06-13T08:16:59.000Z","updated":"2017-10-19T03:25:26.640Z","comments":true,"path":"2017/IONIC2+/【IONIC2+】项目开发-2-创建项目/","link":"","permalink":"http://visoon0012.github.io/2017/IONIC2+/【IONIC2+】项目开发-2-创建项目/","excerpt":"","text":"创建一个IONIC2+的项目 前往官网 IONIC官网 现在我们可以看到，当前IONIC的最新版本是3.3.0，这个版本也属于IONIC2+，代码风格是一样的，不像IONIC1和IONIC2改动这么大。 现在我们要安装 nodejs ，自己去官网下吧，最好是稳定版。 安装ionic npm install -g cordova@6.5.0 ionic 安装完成后，新建项目，这里有几个模板可选 ionic start myApp tabs 经过比较长时间的等待，安装完啦，进入目录，运行浏览，我们就可以在浏览器中看到项目大概的样子了 cd myApp ionic serve 下一章节 创建一个ionic2+ 的项目。","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/"},{"name":"IONIC2+","slug":"JAVASCRIPT/IONIC2","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/IONIC2/"}],"tags":[{"name":"Angular2+","slug":"Angular2","permalink":"http://visoon0012.github.io/tags/Angular2/"},{"name":"IONIC2+","slug":"IONIC2","permalink":"http://visoon0012.github.io/tags/IONIC2/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://visoon0012.github.io/tags/NodeJS/"}]},{"title":"【MacOS】查看端口占用进程以及强制清理进程.md","slug":"MacOS/【MacOS】查看端口占用进程以及强制清理进程","date":"2017-05-31T01:16:59.000Z","updated":"2017-07-10T03:05:22.458Z","comments":true,"path":"2017/MacOS/【MacOS】查看端口占用进程以及强制清理进程/","link":"","permalink":"http://visoon0012.github.io/2017/MacOS/【MacOS】查看端口占用进程以及强制清理进程/","excerpt":"","text":"查看8000段口被占用进程：$ lsof -i:8000 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME Python 13911 Visoon 6u IPv4 0x8c39173908c3db9f 0t0 TCP *:vcom-tunnel (LISTEN) kill掉无用进程kill 13911","categories":[{"name":"MacOS","slug":"MacOS","permalink":"http://visoon0012.github.io/categories/MacOS/"}],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"http://visoon0012.github.io/tags/MacOS/"}]},{"title":"【IONIC2+】项目开发 - 目录","slug":"IONIC2+/【IONIC2+】项目开发-1-目录","date":"2017-05-19T08:16:59.000Z","updated":"2017-10-19T03:25:26.264Z","comments":true,"path":"2017/IONIC2+/【IONIC2+】项目开发-1-目录/","link":"","permalink":"http://visoon0012.github.io/2017/IONIC2+/【IONIC2+】项目开发-1-目录/","excerpt":"","text":"项目说明 本次项目基于ionic2+，目前是ionic3 typescript版本为2.2.2 node -v 6.10.1 这个系列的文章旨在教你写一个基于ionic2+的搜索App 你可以学到如下知识： 写个跨平台的APP 了解Angular2+的逻辑 了解node爬虫 可以爬到自己想要的东西 文章不会一步步教你怎么做，比如页面怎么写，这不是重点，重点在于编码与解决问题的思路目录 创建一个ionic2+ 的项目。 创建一个ionic2+ 的项目。 还在写…别急…","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/"},{"name":"IONIC2+","slug":"JAVASCRIPT/IONIC2","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/IONIC2/"}],"tags":[{"name":"Angular2+","slug":"Angular2","permalink":"http://visoon0012.github.io/tags/Angular2/"},{"name":"IONIC2+","slug":"IONIC2","permalink":"http://visoon0012.github.io/tags/IONIC2/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://visoon0012.github.io/tags/NodeJS/"}]},{"title":"【IONIC2+】项目开发 - 目录","slug":"IONIC2+/【IONIC2+】生命周期","date":"2017-05-19T08:16:59.000Z","updated":"2018-03-05T01:47:39.451Z","comments":true,"path":"2017/IONIC2+/【IONIC2+】生命周期/","link":"","permalink":"http://visoon0012.github.io/2017/IONIC2+/【IONIC2+】生命周期/","excerpt":"","text":"IONIC2+ 的生命周期 ionViewLoaded - 页面加载完毕触发。该事件发生在页面被创建成 DOM 的时候，且仅仅执行一次。如果页面被缓存（Ionic默认是缓存的）就不会再次触发该事件。该事件中可以放置初始化页面的一些事件。 ionViewWillEnter - 即将进入一个页面变成当前激活页面的时候执行的事件。 ionViewDidEnter - 进入了一个页面且变成了当前的激活页面，该事件不管是第一次进入还是缓存后进入都将执行。 ionViewWillLeave - 将要离开了该页面之后变成了不是当前激活页面的时候执行的事件。 ionViewDidLeave - 在页面完成了离开该页面并变成了不是当前激活页面的时候执行的事件。 ionViewWillUnload - 在页面销毁和页面中有元素移除之前执行的事件。 ionViewDidUnload - 在页面销毁和页面中有元素移除之后执行的事件。","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/"},{"name":"IONIC2+","slug":"JAVASCRIPT/IONIC2","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/IONIC2/"}],"tags":[{"name":"Angular2+","slug":"Angular2","permalink":"http://visoon0012.github.io/tags/Angular2/"},{"name":"IONIC2+","slug":"IONIC2","permalink":"http://visoon0012.github.io/tags/IONIC2/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://visoon0012.github.io/tags/NodeJS/"}]},{"title":"KCP客户端配置","slug":"Shadowsocks/KCP客户端配置","date":"2016-12-12T03:04:57.000Z","updated":"2017-10-19T03:12:28.339Z","comments":true,"path":"2016/Shadowsocks/KCP客户端配置/","link":"","permalink":"http://visoon0012.github.io/2016/Shadowsocks/KCP客户端配置/","excerpt":"","text":"如果下面教程看不懂，在群里问，我有空会回的，也不要私聊我，忙的时候没空回 免费服务器如果开启KCP，在SS客户端里面配置的密码是：blog.visoon.net SS客户端和KCP客户端在右下角的时候是可以右击的，有些功能请右击出来。 Windows端配置： 首先你需要KCP客户端软件，在群217973315的群文件里可以找到。 看图： 选择你的KCP客户端文件，图里3那个位置，群文件里下下来放哪里你就选哪里 修改基本参数，只需要修改：本地侦听端口（多个服务器这里端口必须不一样），KCP服务器地址（我的服务器地址），端口（我的服务器端口） 其他的都不要动！！！可选参数那里也不要打钩！！！不知道的请参照原来有的免费的配置，请确定除了第4条要修改的东西不一样外，其他都保持一致。 点击启动 去SS里，填写服务器地址为：127.0.0.1，密码是我给你的密码，端口是KCP客户端里基本参数里面的本地侦听端口。 开启SS，选择127.0.0.1这个服务器，然后愉快的上网。 SS的代理模式请使用PAC模式，不要全局代理，不然国内网站访问会慢。 Mac端配置： 下载Mac端软件，请到程序猿交友网站下载：https://github.com/xtaci/kcptun/releases kcptun-darwin-386-20161207.tar.gz 这个是32位的 kcptun-darwin-amd64-20161207.tar.gz 这个是64位的 这个是GUI界面：https://github.com/dfdragon/kcptun_xclient/releases 像Windows下面一样配置 SS配置如同Windows","categories":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/categories/Shadowsocks/"}],"tags":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/tags/Shadowsocks/"}]},{"title":"Ubuntu配置SS_GO集成环境(包括KCP和KCP加密)","slug":"Shadowsocks/Ubuntu配置SS_GO集成环境(包括KCP和KCP加密)","date":"2016-12-12T03:04:57.000Z","updated":"2017-10-20T08:21:26.132Z","comments":true,"path":"2016/Shadowsocks/Ubuntu配置SS_GO集成环境(包括KCP和KCP加密)/","link":"","permalink":"http://visoon0012.github.io/2016/Shadowsocks/Ubuntu配置SS_GO集成环境(包括KCP和KCP加密)/","excerpt":"","text":"首先安装GO语言环境 apt-get update apt-get install golang-go 设置GOPATH变量，指定工作空间 echo &quot;export GOPATH=/opt/go&quot; &gt;&gt; ~/.bashrc source ~/.bashrc 安装kcpraw集成环境 wget https://github.com/ccsexyz/kcpraw/releases/download/v20171019/kcpraw-linux-amd64-20171019.tar.gz tar -xvzf kcpraw-linux-amd64-20171019.tar.gz chmod 777 kcpraw_server_linux_amd64 新建bash vim start_kcpraw ESC + I 切换输入模式，输入以下东西 #!/bin/bash nohup ./kcpraw_server_linux_amd64 --target 服务器ip:8388 --ssproxy --sskey 密码 ESC + : 切换保存模式，输入 wq 保存退出 赋予脚本权限 chmod 777 start_kcpraw 运行脚本 ./start_kcpraw","categories":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/categories/Shadowsocks/"}],"tags":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://visoon0012.github.io/tags/Shadowsocks/"}]},{"title":"Ubuntu 14.04 更换内核","slug":"Linux/Ubuntu14.04更换内核","date":"2016-09-21T09:13:28.000Z","updated":"2017-10-19T03:04:04.909Z","comments":true,"path":"2016/Linux/Ubuntu14.04更换内核/","link":"","permalink":"http://visoon0012.github.io/2016/Linux/Ubuntu14.04更换内核/","excerpt":"","text":"查看当前内核版本： uname -r 安装新内核： $ sudo apt-get install linux-image-extra-3.16.0-43-generic 卸载其他内核： # 列出其他内核 $ dpkg -l|grep linux-image # 卸载其他内核 $ sudo apt-get purge linux-image-3.16.0-36-generic linux-image-extra-3.16.0-36-generic 更新grub 系统引导文件并重启：$ sudo update-grub$ sudo rebootOK！！！","categories":[{"name":"服务器","slug":"服务器","permalink":"http://visoon0012.github.io/categories/服务器/"},{"name":"Linux","slug":"服务器/Linux","permalink":"http://visoon0012.github.io/categories/服务器/Linux/"}],"tags":[]},{"title":"Linux下利用iptables添加访问许可","slug":"Linux/Linux下利用iptables添加访问许可","date":"2016-03-18T06:12:47.000Z","updated":"2017-10-19T03:04:04.779Z","comments":true,"path":"2016/Linux/Linux下利用iptables添加访问许可/","link":"","permalink":"http://visoon0012.github.io/2016/Linux/Linux下利用iptables添加访问许可/","excerpt":"","text":"禁用某个IP段： iptables -I INPUT -s 14.215.1.0/24 -j DROP&nbsp;","categories":[{"name":"服务器","slug":"服务器","permalink":"http://visoon0012.github.io/categories/服务器/"},{"name":"Linux","slug":"服务器/Linux","permalink":"http://visoon0012.github.io/categories/服务器/Linux/"}],"tags":[]},{"title":"使用SpringBoot + Mybatis快速搭建Spring Restful开发环境","slug":"Java/使用SpringBoot + Mybatis快速搭建Spring Restful开发环境","date":"2016-02-05T13:19:28.000Z","updated":"2017-07-10T03:05:22.455Z","comments":true,"path":"2016/Java/使用SpringBoot + Mybatis快速搭建Spring Restful开发环境/","link":"","permalink":"http://visoon0012.github.io/2016/Java/使用SpringBoot + Mybatis快速搭建Spring Restful开发环境/","excerpt":"最近项目需要用Spring搭建一个Restful API项目，因此重拾了很久没用的JAVA，发现Spring多了一个SpringBoot项目，集成了嵌入式Tomcat，Jetty容器，无需部署WAR包，Mybatis也有类似的与Spring集成的东西，叫 mybatis-spring-boot ，这两个可以免除写一堆XML配置文件，以前写JAVA痛苦的XML配置过程不堪回首，所以干脆用这个搭一个吧。其实官方给的例子已经很详细了，下面是搭建的经验，懂的可以不用看了。","text":"最近项目需要用Spring搭建一个Restful API项目，因此重拾了很久没用的JAVA，发现Spring多了一个SpringBoot项目，集成了嵌入式Tomcat，Jetty容器，无需部署WAR包，Mybatis也有类似的与Spring集成的东西，叫 mybatis-spring-boot ，这两个可以免除写一堆XML配置文件，以前写JAVA痛苦的XML配置过程不堪回首，所以干脆用这个搭一个吧。其实官方给的例子已经很详细了，下面是搭建的经验，懂的可以不用看了。 官方链接： https://spring.io/guides/gs/rest-service/ https://github.com/mybatis/mybatis-spring-boot 建立Maven项目，我用的是IDEA 复制pom.xml，添加依赖文件&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;&lt;project xmlns=”http://maven.apache.org/POM/4.0.0“ xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;visoon&lt;/groupId&gt;&lt;artifactId&gt;visoon&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3.2.RELEASE&amp;lt;/version&amp;gt; &lt;/parent&gt; &lt;properties&gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &lt;/properties&gt; &lt;dependencies&gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mysql--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &lt;/dependencies&gt; &lt;build&gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &lt;/build&gt; &lt;repositories&gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/libs-release&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &lt;/repositories&gt;&lt;pluginRepositories&gt; &amp;lt;pluginRepository&amp;gt; &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;https://repo.spring.io/libs-release&amp;lt;/url&amp;gt; &amp;lt;/pluginRepository&amp;gt; &lt;/pluginRepositories&gt;&lt;/project&gt;&nbsp; 一般项目结构是这样的： 编写Application.javapackage cn.visoon; import org.apache.ibatis.session.SqlSessionFactory;import org.apache.log4j.Logger;import org.mybatis.spring.SqlSessionFactoryBean;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.core.io.support.PathMatchingResourcePatternResolver;import org.springframework.jdbc.datasource.DataSourceTransactionManager;import org.springframework.transaction.PlatformTransactionManager; import javax.sql.DataSource; @EnableAutoConfiguration@SpringBootApplication@ComponentScan@MapperScan(“cn.visoon.wechat.mapper”)public class Application { private static Logger logger = Logger.getLogger(Application.class); @Bean @ConfigurationProperties(prefix=&quot;spring.datasource&quot;) public DataSource dataSource() { return new org.apache.tomcat.jdbc.pool.DataSource(); } @Bean public SqlSessionFactory sqlSessionFactoryBean() throws Exception { SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); sqlSessionFactoryBean.setDataSource(dataSource()); PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(); sqlSessionFactoryBean.setMapperLocations(resolver.getResources(&quot;classpath:/mybatis/*.xml&quot;)); return sqlSessionFactoryBean.getObject(); } @Bean public PlatformTransactionManager transactionManager() { return new DataSourceTransactionManager(dataSource()); } public static void main(String[] args) { SpringApplication.run(Application.class, args); } }&nbsp; 编写User.javapackage cn.visoon.wechat.model; public class User { private Integer id; private String name; private Integer age; private String password; public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } }&nbsp; 编写UserService.javapackage cn.visoon.wechat.service; import cn.visoon.wechat.mapper.UserMapper;import cn.visoon.wechat.model.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service; @Servicepublic class UserService { @Autowired private UserMapper userMapper; public User getUserInfo() { User user = userMapper.findUserInfo(); return user; } }&nbsp; 编写UserMapper.javapackage cn.visoon.wechat.mapper; import cn.visoon.wechat.model.User; public interface UserMapper { public User findUserInfo();}&nbsp; 编写UserController.javapackage cn.visoon.wechat.controller; import cn.visoon.wechat.model.User;import cn.visoon.wechat.service.UserService;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController; import java.util.concurrent.atomic.AtomicLong; @RestControllerpublic class UserController { private Logger logger = Logger.getLogger(UserController.class); @Autowired private UserService userService; @RequestMapping(&quot;/getUser&quot;) public User getUser() { User user = userService.getUserInfo(); if (user != null) { logger.info(&quot;user.getId():&quot; + user.getId()); logger.info(&quot;user.getAge():&quot; + user.getAge()); logger.info(&quot;user.getName():&quot; + user.getName()); } return user; } }&nbsp; 配置数据库spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=gbk&amp;zeroDateTimeBehavior=convertToNullspring.datasource.username=rootspring.datasource.password=rootspring.datasource.driver-class-name=com.mysql.jdbc.Driver&nbsp; 配置log4j#config root loggerlog4j.rootLogger = INFO,system.outlog4j.appender.system.out=org.apache.log4j.ConsoleAppenderlog4j.appender.system.out.layout=org.apache.log4j.PatternLayoutlog4j.appender.system.out.layout.ConversionPattern=[Log] %5p[%F:%L]:%m%n #config this Project.file loggerlog4j.logger.thisProject.file=INFO,thisProject.file.outlog4j.appender.thisProject.file.out=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.thisProject.file.out.File=logContentFile.loglog4j.appender.thisProject.file.out.layout=org.apache.log4j.PatternLayout&nbsp; 配置查询SQL。UserMapper.xml&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;&lt;!DOCTYPE mapper PUBLIC “-//mybatis.org//DTD Mapper 3.0//EN” “http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt;&lt;mapper namespace=”cn.visoon.wechat.mapper.UserMapper”&gt; &lt;select id=”findUserInfo” resultType=”cn.visoon.wechat.model.User”&gt;select id, name, age,password from user;&lt;/select&gt; &lt;/mapper&gt;&nbsp; 最后，运行Application.java，像运行java应用程序一样。程序就跑起来了~&nbsp;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://visoon0012.github.io/categories/JAVA/"},{"name":"Spring","slug":"JAVA/Spring","permalink":"http://visoon0012.github.io/categories/JAVA/Spring/"}],"tags":[]},{"title":"IONIC手机浏览器INPUT标签点击放大","slug":"IONIC1/IONIC手机浏览器INPUT标签点击放大","date":"2016-01-28T08:16:59.000Z","updated":"2017-10-19T03:06:58.128Z","comments":true,"path":"2016/IONIC1/IONIC手机浏览器INPUT标签点击放大/","link":"","permalink":"http://visoon0012.github.io/2016/IONIC1/IONIC手机浏览器INPUT标签点击放大/","excerpt":"","text":"手机浏览器认为输入时16px才能让用户看清楚，因此在点击时把字体设置成16px以上就不会出现这个问题了：@media only screenand (min-device-width : 320px)and (max-device-width : 1024px) { select:focus, textarea:focus, input:focus { font-size: 16px !important; }}&gt; 著作权归作者所有。&gt; 商业转载请联系作者获得授权，非商业转载请注明出处。&gt; 作者：周权&gt; 链接：https://www.zhihu.com/question/20041793/answer/41798672&gt; 来源：知乎&gt;&gt;","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/"},{"name":"AngularJs","slug":"JAVASCRIPT/AngularJs","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/"},{"name":"IONIC","slug":"JAVASCRIPT/AngularJs/IONIC","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/IONIC/"}],"tags":[]},{"title":"Angular/Ionic中使用PUT方法遇到OPTIONS问题的解决方案","slug":"IONIC1/Angular_Ionic中使用PUT方法遇到OPTIONS问题的解决方案","date":"2016-01-28T08:02:27.000Z","updated":"2017-10-19T03:04:04.962Z","comments":true,"path":"2016/IONIC1/Angular_Ionic中使用PUT方法遇到OPTIONS问题的解决方案/","link":"","permalink":"http://visoon0012.github.io/2016/IONIC1/Angular_Ionic中使用PUT方法遇到OPTIONS问题的解决方案/","excerpt":"","text":"开发Angular/Ionic中遇到使用PUT方法遇到OPTIONS问题，使用PUT方法返回405错误，查了许久，看到这篇博文。 http://my.oschina.net/blogshi/blog/303758?fromerr=ALJoxiKgCORS的本质让服务器通过新增响应头Access-Control-Allow-Origin,通过HTTP方式来实现资源共享,让每个请求的服务直接返回资源.它使用了HTTP交互方式来确定请求源是否有资格请求该资源,并且通过设置HTTP Header来控制访问资源的权限. 因此需要在后端拦截OPTIONS方法，在headers中返回如下信息： Access-Control-Allow-Origin: “*” Access-Control-Allow-Methods: “PUT” Access-Control-Max-Age: “60”&nbsp; 返回以上信息基本流程就可以处理下去了。 &nbsp; 但是开发中还遇到了PUT方法payload提交不正确，需要把提交的数据转换成JSON格式。原理是直接JSON.stringify()一下： login: function (user) { var data = { ‘_format’: ‘json’, ‘password’: md5(user.password), ‘verifyCode’: user.verifyCode, ‘sessionMark’: user.sessionMark }; data = JSON.stringify(data); return $http({ method: ‘PUT’, url: HOST_URL + “/user/“ + user.userName + “/apiKey”, data: data }).success(function (response) { localStorage.removeItem(‘user’); USER = response; }).error(function (data, status, headers, config) { if (status == ‘404’) { $ionicLoading.show({ template: ‘找不到该用户’, duration: 2000 }); } else { $ionicLoading.show({ template: data.error.message, duration: 2000 }); } }); },&nbsp;","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/"},{"name":"AngularJs","slug":"JAVASCRIPT/AngularJs","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/"},{"name":"IONIC","slug":"JAVASCRIPT/AngularJs/IONIC","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/IONIC/"}],"tags":[]},{"title":"ionic/AngularJs service使用","slug":"IONIC1/ionic_AngularJs_service使用","date":"2016-01-27T07:10:14.000Z","updated":"2017-10-19T03:04:04.861Z","comments":true,"path":"2016/IONIC1/ionic_AngularJs_service使用/","link":"","permalink":"http://visoon0012.github.io/2016/IONIC1/ionic_AngularJs_service使用/","excerpt":"","text":"列一个项目中用到factory的例子，基本上service原理都是单例。 services.factory(&#39;UserService&#39;, function ($http, $ionicLoading) { // 用户对象 var user = null; return { /** * 获取用户对象 * @returns */ getUser: function () { return user; }, /** * 登录 - /v1/user/{userName}/apiKey * @param user */ login: function (user) { $http.post(HOST_URL + &quot;/user/&quot; + user.userName + &quot;apiKey&quot;, { password: md5(user.password), verifyCode: user.verifyCode, sessionMark: user.sessionMark }).success(function (response) { user = response; }).error(function (response) { $ionicLoading.show({ template: response, duration: 2000 }); }); } }; }); &nbsp;","categories":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/"},{"name":"AngularJs","slug":"JAVASCRIPT/AngularJs","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/"},{"name":"IONIC","slug":"JAVASCRIPT/AngularJs/IONIC","permalink":"http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/IONIC/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://visoon0012.github.io/tags/前端/"}]}]}