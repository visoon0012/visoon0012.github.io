<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Visoon&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/40f96648affe29d6729e177adcbeaf3d</icon>
  <subtitle>会扯淡的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://visoon0012.github.io/"/>
  <updated>2017-07-10T07:14:59.981Z</updated>
  <id>http://visoon0012.github.io/</id>
  
  <author>
    <name>Visoon</name>
    <email>visoon0012@hotmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【IONIC2+】项目开发 - 2 - 创建项目</title>
    <link href="http://visoon0012.github.io/2017/06/13/IONIC2+/%E3%80%90IONIC2+%E3%80%91%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%20-%202%20-%20%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://visoon0012.github.io/2017/06/13/IONIC2+/【IONIC2+】项目开发 - 2 - 创建项目/</id>
    <published>2017-06-13T08:16:59.000Z</published>
    <updated>2017-07-10T07:14:59.981Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建一个IONIC2-的项目"><a href="#创建一个IONIC2-的项目" class="headerlink" title="创建一个IONIC2+的项目"></a>创建一个IONIC2+的项目</h4><ol><li>前往官网 <a href="https://ionicframework.com/" target="_blank" rel="external">IONIC官网</a></li><li>现在我们可以看到，当前IONIC的最新版本是3.3.0，这个版本也属于IONIC2+，代码风格是一样的，不像IONIC1和IONIC2改动这么大。</li><li>现在我们要安装 nodejs ，自己去官网下吧，最好是稳定版。</li><li><p>安装ionic</p><pre><code>npm install -g cordova@6.5.0 ionic</code></pre></li><li><p>安装完成后，新建项目，这里有几个模板可选</p><pre><code>ionic start myApp tabs</code></pre></li><li><p>经过比较长时间的等待，安装完啦，进入目录，运行浏览，我们就可以在浏览器中看到项目大概的样子了</p><pre><code>cd myAppionic serve</code></pre><h4 id="下一章节"><a href="#下一章节" class="headerlink" title="下一章节"></a>下一章节</h4></li></ol><ul><li><a href="http://example.com/" target="_blank" rel="external">创建一个ionic2+ 的项目。</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;创建一个IONIC2-的项目&quot;&gt;&lt;a href=&quot;#创建一个IONIC2-的项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个IONIC2+的项目&quot;&gt;&lt;/a&gt;创建一个IONIC2+的项目&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;前往官网 &lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="JAVASCRIPT" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/"/>
    
      <category term="IONIC" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/IONIC/"/>
    
    
      <category term="IONIC2+" scheme="http://visoon0012.github.io/tags/IONIC2/"/>
    
      <category term="NodeJS" scheme="http://visoon0012.github.io/tags/NodeJS/"/>
    
      <category term="Angular2+" scheme="http://visoon0012.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>【IONIC2+】项目开发 - 3 - 添加页面</title>
    <link href="http://visoon0012.github.io/2017/06/13/IONIC2+/%E3%80%90IONIC2+%E3%80%91%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%20-%203%20-%20%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2/"/>
    <id>http://visoon0012.github.io/2017/06/13/IONIC2+/【IONIC2+】项目开发 - 3 - 添加页面/</id>
    <published>2017-06-13T08:16:59.000Z</published>
    <updated>2017-07-10T03:05:22.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="往刚才创建的项目中添加页面"><a href="#往刚才创建的项目中添加页面" class="headerlink" title="往刚才创建的项目中添加页面"></a>往刚才创建的项目中添加页面</h4><ol><li>前往官网，查看 <a href="https://ionicframework.com/docs/intro/tutorial/" target="_blank" rel="external">IONIC官方教程</a></li><li>如果你看不懂英文，没事，那我们就不学了。</li></ol><h4 id="创建页面有几个重要的地方"><a href="#创建页面有几个重要的地方" class="headerlink" title="创建页面有几个重要的地方"></a>创建页面有几个重要的地方</h4><ol><li>创建 .ts 文件，这个文件是存放页面逻辑的地方，例如我们创建一个帖子页面在 post.ts 文件里<pre>export class PostPage {}</pre></li><li>创建 .html 文件，这个文件是界面</li><li>创建 .scss 文件，这个文件是CSS</li><li>把 .ts 文件中的类的引用添加到 app/app.module.ts 中<pre>import {PostPage} from "../pages/post";</pre></li><li>把类名添加到 NgModule 中的 declarations 和 entryComponents 中(所有新加的页面都要放到这里进行声明，不然会报错)<pre>declarations: [     MyApp,     TabsPage,     PostPage     ]</pre><pre>entryComponents: [     MyApp,     TabsPage,     PostPage     ]</pre></li><li>要跳转到 PostPage 的页面，只需要在需要的地方使用(后面的参数是传递过去的值，在 PostPage 中你可以用 NavParams 接收)<br><pre><br>this.navCtrl.push(PostPage, { item: item });<br></pre><h4 id="下一章节"><a href="#下一章节" class="headerlink" title="下一章节"></a>下一章节</h4></li></ol><ul><li><a href="http://example.com/" target="_blank" rel="external">创建一个ionic2+ 的项目。</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;往刚才创建的项目中添加页面&quot;&gt;&lt;a href=&quot;#往刚才创建的项目中添加页面&quot; class=&quot;headerlink&quot; title=&quot;往刚才创建的项目中添加页面&quot;&gt;&lt;/a&gt;往刚才创建的项目中添加页面&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;前往官网，查看 &lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="JAVASCRIPT" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/"/>
    
      <category term="IONIC" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/IONIC/"/>
    
    
      <category term="IONIC2+" scheme="http://visoon0012.github.io/tags/IONIC2/"/>
    
      <category term="NodeJS" scheme="http://visoon0012.github.io/tags/NodeJS/"/>
    
      <category term="Angular2+" scheme="http://visoon0012.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>【MacOS】查看端口占用进程以及强制清理进程.md</title>
    <link href="http://visoon0012.github.io/2017/05/31/MacOS/%E3%80%90MacOS%E3%80%91%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%BC%BA%E5%88%B6%E6%B8%85%E7%90%86%E8%BF%9B%E7%A8%8B/"/>
    <id>http://visoon0012.github.io/2017/05/31/MacOS/【MacOS】查看端口占用进程以及强制清理进程/</id>
    <published>2017-05-31T01:16:59.000Z</published>
    <updated>2017-07-10T03:05:22.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看8000段口被占用进程："><a href="#查看8000段口被占用进程：" class="headerlink" title="查看8000段口被占用进程："></a>查看8000段口被占用进程：</h3><pre><code>$ lsof -i:8000COMMAND   PID      USER   FD   TYPE             DEVICE SIZE/OFF NODE NAMEPython  13911    Visoon    6u  IPv4 0x8c39173908c3db9f      0t0  TCP *:vcom-tunnel (LISTEN)</code></pre><h3 id="kill掉无用进程"><a href="#kill掉无用进程" class="headerlink" title="kill掉无用进程"></a>kill掉无用进程</h3><pre><code>kill 13911</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看8000段口被占用进程：&quot;&gt;&lt;a href=&quot;#查看8000段口被占用进程：&quot; class=&quot;headerlink&quot; title=&quot;查看8000段口被占用进程：&quot;&gt;&lt;/a&gt;查看8000段口被占用进程：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ lsof -i:8000
      
    
    </summary>
    
      <category term="MacOS" scheme="http://visoon0012.github.io/categories/MacOS/"/>
    
    
      <category term="MacOS" scheme="http://visoon0012.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>【IONIC2+】项目开发 - 目录</title>
    <link href="http://visoon0012.github.io/2017/05/19/IONIC2+/%E3%80%90IONIC2+%E3%80%91%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%20-%201%20-%20%E7%9B%AE%E5%BD%95/"/>
    <id>http://visoon0012.github.io/2017/05/19/IONIC2+/【IONIC2+】项目开发 - 1 - 目录/</id>
    <published>2017-05-19T08:16:59.000Z</published>
    <updated>2017-07-10T03:05:22.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h1><ul><li>本次项目基于ionic2+，目前是ionic3</li><li>typescript版本为2.2.2</li><li>node -v 6.10.1</li><li>这个系列的文章旨在教你写一个基于ionic2+的搜索App</li><li>你可以学到如下知识：<ul><li>写个跨平台的APP</li><li>了解Angular2+的逻辑</li><li>了解node爬虫</li><li>可以爬到自己想要的东西</li></ul></li><li>文章不会一步步教你怎么做，比如页面怎么写，这不是重点，重点在于编码与解决问题的思路<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1></li></ul><ol><li><a href="http://example.com/" target="_blank" rel="external">创建一个ionic2+ 的项目。</a></li><li><a href="http://example.com/" target="_blank" rel="external">创建一个ionic2+ 的项目。</a></li><li>还在写…别急…</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本次项目基于ionic2+，目前是ionic3&lt;/li&gt;
&lt;li&gt;typescript版本为2.2.2&lt;/li&gt;
      
    
    </summary>
    
      <category term="JAVASCRIPT" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/"/>
    
      <category term="IONIC" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/IONIC/"/>
    
    
      <category term="IONIC2+" scheme="http://visoon0012.github.io/tags/IONIC2/"/>
    
      <category term="NodeJS" scheme="http://visoon0012.github.io/tags/NodeJS/"/>
    
      <category term="Angular2+" scheme="http://visoon0012.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>KCP客户端配置</title>
    <link href="http://visoon0012.github.io/2016/12/12/Shadowsocks/KCP%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <id>http://visoon0012.github.io/2016/12/12/Shadowsocks/KCP客户端配置/</id>
    <published>2016-12-12T03:04:57.000Z</published>
    <updated>2017-07-10T03:05:22.459Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color: #ff0000;">如果下面教程看不懂，在群里问，我有空会回的，也不要私聊我，忙的时候没空回</span></p><p>免费服务器如果开启KCP，在SS客户端里面配置的密码是：blog.visoon.net</p><p>SS客户端和KCP客户端在右下角的时候是可以<span style="color: #ff0000;">右击</span>的，有些功能请右击出来。</p><h1 id="Windows端配置："><a href="#Windows端配置：" class="headerlink" title="Windows端配置："></a>Windows端配置：</h1><ol><li>首先你需要KCP客户端软件，在群217973315的群文件里可以找到。</li><li>看图：<img src="/img/KCP客户端配置/Kcptun_GUI_config.png" alt="kcptun_gui_config"></li><li>选择你的KCP客户端文件，图里3那个位置，群文件里下下来放哪里你就选哪里</li><li>修改基本参数，只需要修改：本地侦听端口（多个服务器这里端口必须不一样），KCP服务器地址（我的服务器地址），端口（我的服务器端口）</li><li>其他的都不要动！！！可选参数那里也不要打钩！！！不知道的请参照原来有的免费的配置，请确定除了第4条要修改的东西不一样外，其他都保持一致。</li><li>点击启动</li><li>去SS里，填写服务器地址为：127.0.0.1，密码是我给你的密码，端口是KCP客户端里基本参数里面的本地侦听端口。</li><li>开启SS，选择127.0.0.1这个服务器，然后愉快的上网。</li><li>SS的代理模式请使用PAC模式，不要全局代理，不然国内网站访问会慢。</li></ol><h1 id="Mac端配置："><a href="#Mac端配置：" class="headerlink" title="Mac端配置："></a>Mac端配置：</h1><ol><li>下载Mac端软件，请到程序猿交友网站下载：<a href="https://github.com/xtaci/kcptun/releases" target="_blank" rel="external">https://github.com/xtaci/kcptun/releases</a></li><li><strong><a href="https://github.com/xtaci/kcptun/releases/download/v20161207/kcptun-darwin-386-20161207.tar.gz" target="_blank" rel="external">kcptun-darwin-386-20161207.tar.gz</a> 这个是32位的</strong></li><li><strong><a href="https://github.com/xtaci/kcptun/releases/download/v20161207/kcptun-darwin-amd64-20161207.tar.gz" target="_blank" rel="external">kcptun-darwin-amd64-20161207.tar.gz</a> 这个是64位的</strong></li><li>这个是GUI界面：<a href="https://github.com/dfdragon/kcptun_xclient/releases" target="_blank" rel="external">https://github.com/dfdragon/kcptun_xclient/releases</a></li><li>像Windows下面一样配置</li><li>SS配置如同Windows</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;如果下面教程看不懂，在群里问，我有空会回的，也不要私聊我，忙的时候没空回&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;免费服务器如果开启KCP，在SS客户端里面配置的密码是：blog.visoon.net&lt;/p&gt;
&lt;p&gt;SS客户端
      
    
    </summary>
    
      <category term="Shadowsocks" scheme="http://visoon0012.github.io/categories/Shadowsocks/"/>
    
    
      <category term="Shadowsocks" scheme="http://visoon0012.github.io/tags/Shadowsocks/"/>
    
      <category term="KCP" scheme="http://visoon0012.github.io/tags/KCP/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 14.04 更换内核</title>
    <link href="http://visoon0012.github.io/2016/09/21/Linux/Ubuntu%2014.04%20%E6%9B%B4%E6%8D%A2%E5%86%85%E6%A0%B8/"/>
    <id>http://visoon0012.github.io/2016/09/21/Linux/Ubuntu 14.04 更换内核/</id>
    <published>2016-09-21T09:13:28.000Z</published>
    <updated>2017-10-19T03:04:04.908Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>查看当前内核版本：</p><pre class="brush:other">uname -r</pre></li><li><p>安装新内核：</p><pre class="brush:other">$ sudo apt-get install linux-image-extra-3.16.0-43-generic</pre></li><li><p>卸载其他内核：</p><pre class="brush:other"># 列出其他内核$ dpkg -l|grep linux-image# 卸载其他内核$ sudo apt-get purge linux-image-3.16.0-36-generic linux-image-extra-3.16.0-36-generic</pre></li><li><p>更新grub 系统引导文件并重启：<br><pre class="brush:other">$ sudo update-grub<br>$ sudo reboot</pre><br>OK！！！</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看当前内核版本：&lt;/p&gt;
&lt;pre class=&quot;brush:other&quot;&gt;uname -r&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装新内核：&lt;/p&gt;
&lt;pre class=&quot;brush:other&quot;&gt;$ sudo apt-get install li
      
    
    </summary>
    
      <category term="服务器" scheme="http://visoon0012.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="http://visoon0012.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 搭建 Shadowsocks 进行科学上网</title>
    <link href="http://visoon0012.github.io/2016/07/28/Shadowsocks/Ubuntu%20%E6%90%AD%E5%BB%BA%20Shadowsocks%20%E8%BF%9B%E8%A1%8C%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://visoon0012.github.io/2016/07/28/Shadowsocks/Ubuntu 搭建 Shadowsocks 进行科学上网/</id>
    <published>2016-07-28T09:25:02.000Z</published>
    <updated>2017-10-19T03:08:34.363Z</updated>
    
    <content type="html"><![CDATA[<p>首先，你需要一台在科学国度的服务器，这里我们用ubuntu来进行搭建。</p><pre class="brush:bash">    $ sudo apt-get update    $ sudo apt-get install python-gevent python-pip    $ sudo pip install shadowsocks    $ apt-get install python-m2crypto</pre><a id="more"></a><p>创建config.json配置文件：</p><pre class="brush:bash">    $ vi /etc/shadowsocks.json</pre><p>修改config.json：</p><pre class="brush:bash">    {        "server":"Server IP",        "server_port":8388,        "local_port":1080,        "password":"password",        "timeout":600,        "method":"aes-256-cfb"    }</pre>&nbsp;运行Shadowsocks：<pre class="brush:bash">    $ su -    $ ssserver -c /etc/shadowsocks.json -d start    $ ssserver -c /etc/shadowsocks.json -d stop</pre><p>然后用你的Shadowsocks客户端输入服务器信息，科学上网完毕。</p><p>注意：<br>1.需要python27环境，一般ubuntu都自带了。<br>2.附赠WIN客户端链接：<a href="https://github.com/shadowsocks/shadowsocks-csharp/releases/download/2.5.6/Shadowsocks-win-2.5.6.zip" target="_blank" rel="external">点我下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，你需要一台在科学国度的服务器，这里我们用ubuntu来进行搭建。&lt;/p&gt;
&lt;pre class=&quot;brush:bash&quot;&gt;
    $ sudo apt-get update
    $ sudo apt-get install python-gevent python-pip
    $ sudo pip install shadowsocks
    $ apt-get install python-m2crypto
&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://visoon0012.github.io/categories/Linux/"/>
    
      <category term="服务器" scheme="http://visoon0012.github.io/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Shadowsocks" scheme="http://visoon0012.github.io/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Linux下利用iptables添加访问许可</title>
    <link href="http://visoon0012.github.io/2016/03/18/Linux/Linux%E4%B8%8B%E5%88%A9%E7%94%A8iptables%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E8%AE%B8%E5%8F%AF/"/>
    <id>http://visoon0012.github.io/2016/03/18/Linux/Linux下利用iptables添加访问许可/</id>
    <published>2016-03-18T06:12:47.000Z</published>
    <updated>2017-10-19T03:04:04.778Z</updated>
    
    <content type="html"><![CDATA[<p>禁用某个IP段：</p><p><pre class="brush:other">iptables -I INPUT -s 14.215.1.0/24 -j DROP</pre><br>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;禁用某个IP段：&lt;/p&gt;
&lt;p&gt;&lt;pre class=&quot;brush:other&quot;&gt;iptables -I INPUT -s 14.215.1.0/24 -j DROP&lt;/pre&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;

      
    
    </summary>
    
      <category term="服务器" scheme="http://visoon0012.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="http://visoon0012.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用SpringBoot + Mybatis快速搭建Spring Restful开发环境</title>
    <link href="http://visoon0012.github.io/2016/02/05/Java/%E4%BD%BF%E7%94%A8SpringBoot%20+%20Mybatis%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BASpring%20Restful%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://visoon0012.github.io/2016/02/05/Java/使用SpringBoot + Mybatis快速搭建Spring Restful开发环境/</id>
    <published>2016-02-05T13:19:28.000Z</published>
    <updated>2017-07-10T03:05:22.455Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目需要用Spring搭建一个Restful API项目，因此重拾了很久没用的JAVA，发现Spring多了一个SpringBoot项目，集成了嵌入式Tomcat，Jetty容器，无需部署WAR包，Mybatis也有类似的与Spring集成的东西，叫 mybatis-spring-boot ，这两个可以免除写一堆XML配置文件，以前写JAVA痛苦的XML配置过程不堪回首，所以干脆用这个搭一个吧。其实官方给的例子已经很详细了，下面是搭建的经验，懂的可以不用看了。</p><a id="more"></a><p>官方链接：</p><blockquote><p><a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="external">https://spring.io/guides/gs/rest-service/</a></p><p><a href="https://github.com/mybatis/mybatis-spring-boot" target="_blank" rel="external">https://github.com/mybatis/mybatis-spring-boot</a></p></blockquote><ol><li>建立Maven项目，我用的是IDEA</li><li><p>复制pom.xml，添加依赖文件<br><pre class="brush:xml">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>&lt;project xmlns=”<a href="http://maven.apache.org/POM/4.0.0" target="_blank" rel="external">http://maven.apache.org/POM/4.0.0</a>“</pre></p><pre><code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;</code></pre><p>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</p><p>&lt;groupId&gt;visoon&lt;/groupId&gt;<br>&lt;artifactId&gt;visoon&lt;/artifactId&gt;<br>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</p><p>&lt;parent&gt;</p><pre><code>&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;1.3.2.RELEASE&amp;lt;/version&amp;gt;</code></pre><p>&lt;/parent&gt;</p><p>&lt;properties&gt;</p><pre><code>&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;</code></pre><p>&lt;/properties&gt;</p><p>&lt;dependencies&gt;</p><pre><code>&amp;lt;dependency&amp;gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt;    &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;!--mysql--&amp;gt;&amp;lt;dependency&amp;gt;    &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;tomcat-jdbc&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt;    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;</code></pre><p>&lt;/dependencies&gt;</p><p>&lt;build&gt;</p><pre><code>&amp;lt;plugins&amp;gt;    &amp;lt;plugin&amp;gt;        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;        &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;    &amp;lt;/plugin&amp;gt;&amp;lt;/plugins&amp;gt;</code></pre><p>&lt;/build&gt;</p><p>&lt;repositories&gt;</p><pre><code>&amp;lt;repository&amp;gt;    &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt;    &amp;lt;url&amp;gt;https://repo.spring.io/libs-release&amp;lt;/url&amp;gt;&amp;lt;/repository&amp;gt;</code></pre><p>&lt;/repositories&gt;<br>&lt;pluginRepositories&gt;</p><pre><code>&amp;lt;pluginRepository&amp;gt;    &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt;    &amp;lt;url&amp;gt;https://repo.spring.io/libs-release&amp;lt;/url&amp;gt;&amp;lt;/pluginRepository&amp;gt;</code></pre><p>&lt;/pluginRepositories&gt;<br>&lt;/project&gt;<br>&nbsp;</p></li><li>一般项目结构是这样的：<img src="http://blog.visoon.net/wp-content/uploads/2016/02/QQ截图20160205210959.png" alt="QQ截图20160205210959"></li><li>编写Application.java<br><pre class="brush:java">package cn.visoon;</pre></li></ol><p>import org.apache.ibatis.session.SqlSessionFactory;<br>import org.apache.log4j.Logger;<br>import org.mybatis.spring.SqlSessionFactoryBean;<br>import org.mybatis.spring.annotation.MapperScan;<br>import org.springframework.boot.SpringApplication;<br>import org.springframework.boot.autoconfigure.EnableAutoConfiguration;<br>import org.springframework.boot.autoconfigure.SpringBootApplication;<br>import org.springframework.boot.context.properties.ConfigurationProperties;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.ComponentScan;<br>import org.springframework.core.io.support.PathMatchingResourcePatternResolver;<br>import org.springframework.jdbc.datasource.DataSourceTransactionManager;<br>import org.springframework.transaction.PlatformTransactionManager;</p><p>import javax.sql.DataSource;</p><p>@EnableAutoConfiguration<br>@SpringBootApplication<br>@ComponentScan<br>@MapperScan(“cn.visoon.wechat.mapper”)<br>public class Application {<br>    private static Logger logger = Logger.getLogger(Application.class);</p><pre><code>@Bean@ConfigurationProperties(prefix=&quot;spring.datasource&quot;)public DataSource dataSource() {    return new org.apache.tomcat.jdbc.pool.DataSource();}@Beanpublic SqlSessionFactory sqlSessionFactoryBean() throws Exception {    SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();    sqlSessionFactoryBean.setDataSource(dataSource());    PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();    sqlSessionFactoryBean.setMapperLocations(resolver.getResources(&quot;classpath:/mybatis/*.xml&quot;));    return sqlSessionFactoryBean.getObject();}@Beanpublic PlatformTransactionManager transactionManager() {    return new DataSourceTransactionManager(dataSource());}public static void main(String[] args) {    SpringApplication.run(Application.class, args);}</code></pre><p>}<br><br>&nbsp;</p><ol><li>编写User.java<br><pre class="brush:java">package cn.visoon.wechat.model;</pre></li></ol><p>public class User {<br>    private Integer id;<br>    private String name;<br>    private Integer age;<br>    private String password;</p><pre><code>public String getName() {    return name;}public void setName(String name) {    this.name = name;}public Integer getAge() {    return age;}public void setAge(Integer age) {    this.age = age;}public String getPassword() {    return password;}public void setPassword(String password) {    this.password = password;}public Integer getId() {    return id;}public void setId(Integer id) {    this.id = id;}</code></pre><p>}<br><br>&nbsp;</p><ol><li>编写UserService.java<br><pre class="brush:java">package cn.visoon.wechat.service;</pre></li></ol><p>import cn.visoon.wechat.mapper.UserMapper;<br>import cn.visoon.wechat.model.User;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;</p><p>@Service<br>public class UserService {<br>    @Autowired<br>    private UserMapper userMapper;</p><pre><code>public User getUserInfo() {    User user = userMapper.findUserInfo();    return user;}</code></pre><p>}<br><br>&nbsp;</p><ol><li>编写UserMapper.java<br><pre class="brush:java">package cn.visoon.wechat.mapper;</pre></li></ol><p>import cn.visoon.wechat.model.User;</p><p>public interface UserMapper {<br>    public User findUserInfo();<br>}<br><br>&nbsp;</p><ol><li>编写UserController.java<br><pre class="brush:java">package cn.visoon.wechat.controller;</pre></li></ol><p>import cn.visoon.wechat.model.User;<br>import cn.visoon.wechat.service.UserService;<br>import org.apache.log4j.Logger;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.RestController;</p><p>import java.util.concurrent.atomic.AtomicLong;</p><p>@RestController<br>public class UserController {</p><pre><code>private Logger logger = Logger.getLogger(UserController.class);@Autowiredprivate UserService userService;@RequestMapping(&quot;/getUser&quot;)public User getUser() {    User user = userService.getUserInfo();    if (user != null) {        logger.info(&quot;user.getId():&quot; + user.getId());        logger.info(&quot;user.getAge():&quot; + user.getAge());        logger.info(&quot;user.getName():&quot; + user.getName());    }    return user;}</code></pre><p>}<br><br>&nbsp;</p><ol><li>配置数据库<br><pre class="brush:other">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=gbk&amp;zeroDateTimeBehavior=convertToNull<br>spring.datasource.username=root<br>spring.datasource.password=root<br>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</pre><br>&nbsp;</li><li>配置log4j<br><pre class="brush:other">#config root logger<br>log4j.rootLogger = INFO,system.out<br>log4j.appender.system.out=org.apache.log4j.ConsoleAppender<br>log4j.appender.system.out.layout=org.apache.log4j.PatternLayout<br>log4j.appender.system.out.layout.ConversionPattern=[Log] %5p[%F:%L]:%m%n</pre></li></ol><p>#config this Project.file logger<br>log4j.logger.thisProject.file=INFO,thisProject.file.out<br>log4j.appender.thisProject.file.out=org.apache.log4j.DailyRollingFileAppender<br>log4j.appender.thisProject.file.out.File=logContentFile.log<br>log4j.appender.thisProject.file.out.layout=org.apache.log4j.PatternLayout<br><br>&nbsp;</p><ol><li><p>配置查询SQL。UserMapper.xml<br><pre class="brush:xml">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>&lt;!DOCTYPE mapper PUBLIC “-//mybatis.org//DTD Mapper 3.0//EN” “<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt" target="_blank" rel="external">http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt</a>;<br>&lt;mapper namespace=”cn.visoon.wechat.mapper.UserMapper”&gt;</pre></p><p>&lt;select id=”findUserInfo” resultType=”cn.visoon.wechat.model.User”&gt;<br>select id, name, age,password from user;<br>&lt;/select&gt;</p></li></ol><p>&lt;/mapper&gt;<br>&nbsp;</p><ol><li>最后，运行Application.java，像运行java应用程序一样。程序就跑起来了~<br>&nbsp;</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目需要用Spring搭建一个Restful API项目，因此重拾了很久没用的JAVA，发现Spring多了一个SpringBoot项目，集成了嵌入式Tomcat，Jetty容器，无需部署WAR包，Mybatis也有类似的与Spring集成的东西，叫 mybatis-spring-boot ，这两个可以免除写一堆XML配置文件，以前写JAVA痛苦的XML配置过程不堪回首，所以干脆用这个搭一个吧。其实官方给的例子已经很详细了，下面是搭建的经验，懂的可以不用看了。&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://visoon0012.github.io/categories/JAVA/"/>
    
      <category term="Spring" scheme="http://visoon0012.github.io/categories/JAVA/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>IONIC手机浏览器INPUT标签点击放大</title>
    <link href="http://visoon0012.github.io/2016/01/28/IONIC1/IONIC%E6%89%8B%E6%9C%BA%E6%B5%8F%E8%A7%88%E5%99%A8INPUT%E6%A0%87%E7%AD%BE%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/"/>
    <id>http://visoon0012.github.io/2016/01/28/IONIC1/IONIC手机浏览器INPUT标签点击放大/</id>
    <published>2016-01-28T08:16:59.000Z</published>
    <updated>2017-10-19T03:06:58.128Z</updated>
    
    <content type="html"><![CDATA[<div>手机浏览器认为输入时16px才能让用户看清楚，因此在点击时把字体设置成16px以上就不会出现这个问题了：</div><br><div><br><pre class="brush:css">@media only screen<br>and (min-device-width : 320px)<br>and (max-device-width : 1024px) {<br>    select:focus,<br>    textarea:focus,<br>    input:focus {<br>        font-size: 16px !important;<br>    }<br>}<br><br></pre><br>&gt; <div>著作权归作者所有。<br>&gt; 商业转载请联系作者获得授权，非商业转载请注明出处。<br>&gt; 作者：周权<br>&gt; 链接：<a href="https://www.zhihu.com/question/20041793/answer/41798672" target="_blank" rel="external">https://www.zhihu.com/question/20041793/answer/41798672</a><br>&gt; 来源：知乎<br>&gt;<br>&gt; </div><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div&gt;手机浏览器认为输入时16px才能让用户看清楚，因此在点击时把字体设置成16px以上就不会出现这个问题了：&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;pre class=&quot;brush:css&quot;&gt;@media only screen&lt;br&gt;and (min-device-wid
      
    
    </summary>
    
      <category term="JAVASCRIPT" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/"/>
    
      <category term="AngularJs" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/"/>
    
      <category term="IONIC" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/IONIC/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular/Ionic中使用PUT方法遇到OPTIONS问题的解决方案</title>
    <link href="http://visoon0012.github.io/2016/01/28/IONIC1/Angular_Ionic%E4%B8%AD%E4%BD%BF%E7%94%A8PUT%E6%96%B9%E6%B3%95%E9%81%87%E5%88%B0OPTIONS%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://visoon0012.github.io/2016/01/28/IONIC1/Angular_Ionic中使用PUT方法遇到OPTIONS问题的解决方案/</id>
    <published>2016-01-28T08:02:27.000Z</published>
    <updated>2017-10-19T03:04:04.962Z</updated>
    
    <content type="html"><![CDATA[<p>开发Angular/Ionic中遇到使用PUT方法遇到OPTIONS问题，使用PUT方法返回405错误，查了许久，看到这篇博文。</p><blockquote><p><a href="http://my.oschina.net/blogshi/blog/303758?fromerr=ALJoxiKg" target="_blank" rel="external">http://my.oschina.net/blogshi/blog/303758?fromerr=ALJoxiKg</a><br>CORS的本质让服务器通过新增响应头Access-Control-Allow-Origin,通过HTTP方式来实现资源共享,让每个请求的服务直接返回资源.它使用了HTTP交互方式来确定请求源是否有资格请求该资源,并且通过设置HTTP Header来控制访问资源的权限.</p></blockquote><p>因此需要在后端拦截OPTIONS方法，在headers中返回如下信息：</p><p><pre class="brush:xml">Access-Control-Allow-Origin: “*”</pre></p><p>Access-Control-Allow-Methods: “PUT”</p><p>Access-Control-Max-Age: “60”<br>&nbsp;</p><p>返回以上信息基本流程就可以处理下去了。</p><p>&nbsp;</p><p>但是开发中还遇到了PUT方法payload提交不正确，需要把提交的数据转换成JSON格式。原理是直接JSON.stringify()一下：</p><p><pre class="brush:javascript">login: function (user) {<br>      var data = {<br>        ‘_format’: ‘json’,<br>        ‘password’: md5(user.password),<br>        ‘verifyCode’: user.verifyCode,<br>        ‘sessionMark’: user.sessionMark<br>      };<br>      data = JSON.stringify(data);<br>      return $http({<br>        method: ‘PUT’,<br>        url: HOST_URL + “/user/“ + user.userName + “/apiKey”,<br>        data: data<br>      }).success(function (response) {<br>        localStorage.removeItem(‘user’);<br>        USER = response;<br>      }).error(function (data, status, headers, config) {<br>        if (status == ‘404’) {<br>          $ionicLoading.show({<br>            template: ‘找不到该用户’,<br>            duration: 2000<br>          });<br>        } else {<br>          $ionicLoading.show({<br>            template: data.error.message,<br>            duration: 2000<br>          });<br>        }<br>      });<br>    },</pre><br>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发Angular/Ionic中遇到使用PUT方法遇到OPTIONS问题，使用PUT方法返回405错误，查了许久，看到这篇博文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://my.oschina.net/blogshi/blog/303758?f
      
    
    </summary>
    
      <category term="JAVASCRIPT" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/"/>
    
      <category term="AngularJs" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/"/>
    
      <category term="IONIC" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/IONIC/"/>
    
    
  </entry>
  
  <entry>
    <title>ionic/AngularJs service使用</title>
    <link href="http://visoon0012.github.io/2016/01/27/IONIC1/ionic_AngularJs_service%E4%BD%BF%E7%94%A8/"/>
    <id>http://visoon0012.github.io/2016/01/27/IONIC1/ionic_AngularJs_service使用/</id>
    <published>2016-01-27T07:10:14.000Z</published>
    <updated>2017-10-19T03:04:04.860Z</updated>
    
    <content type="html"><![CDATA[<p>列一个项目中用到factory的例子，基本上service原理都是单例。</p><pre class="brush:javascript">services.factory(&#39;UserService&#39;, function ($http, $ionicLoading) {  // 用户对象  var user = null;  return {    /**     * 获取用户对象     * @returns      */    getUser: function () {      return user;    },    /**     * 登录 - /v1/user/{userName}/apiKey     * @param user     */    login: function (user) {      $http.post(HOST_URL + &quot;/user/&quot; + user.userName + &quot;apiKey&quot;, {        password: md5(user.password),        verifyCode: user.verifyCode,        sessionMark: user.sessionMark      }).success(function (response) {        user = response;      }).error(function (response) {        $ionicLoading.show({          template: response,          duration: 2000        });      });    }  };});</pre><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;列一个项目中用到factory的例子，基本上service原理都是单例。&lt;/p&gt;
&lt;pre class=&quot;brush:javascript&quot;&gt;services.factory(&amp;#39;UserService&amp;#39;, function ($http, $ionicLoa
      
    
    </summary>
    
      <category term="JAVASCRIPT" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/"/>
    
      <category term="AngularJs" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/"/>
    
      <category term="IONIC" scheme="http://visoon0012.github.io/categories/JAVASCRIPT/AngularJs/IONIC/"/>
    
    
      <category term="前端" scheme="http://visoon0012.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
